-- File generated by DtdToHaskell.
-- manually changed to use Output type for alternatives,
-- and to escape certain fields.

module Util.Xml.OutputDTD where

import Text.XML.HaXml.Xml2Haskell
import Text.XML.HaXml.Escape
import Data.Char (isSpace)

{-Type decls-}

data Output
    = OPre Pre
    | OText Text
    | OImage Image
    | OLink Link
    | OAbove Above
    | OBeside Beside
    | OItemize Itemize
    | OSpace Space
    deriving (Eq,Show)

newtype Pre = Pre String                deriving (Eq,Show)
newtype Text = Text String              deriving (Eq,Show)
data Image = Image Image_Attrs String
           deriving (Eq,Show)
data Image_Attrs = Image_Attrs
    { imageType :: String
    , imageAlt :: String
    } deriving (Eq,Show)
data Link = Link Link_Attrs String
          deriving (Eq,Show)
data Link_Attrs = Link_Attrs
    { linkHref :: String
    } deriving (Eq,Show)
newtype Above = Above [Output]          deriving (Eq,Show)
newtype Beside = Beside [Output]        deriving (Eq,Show)
newtype Itemize = Itemize [Output]      deriving (Eq,Show)
data Space = Space
    { spaceWidth :: String
    , spaceHeight :: String
    , spaceUnit :: String
    } deriving (Eq,Show)


fromTextEscaped :: [Content] -> (Maybe String, [Content])
fromTextEscaped cs = fromText cs' where
    Elem _ _ cs' = xmlUnEscape stdXmlEscaper (Elem "" [] cs)

toTextEscaped :: String -> [Content]
toTextEscaped s = cs where
    Elem _ _ cs = xmlEscape stdXmlEscaper (Elem "" [] (toText s))

{-Instance decls-}

instance XmlContent Pre where
    fromElem (CElem (Elem "Pre" [] c0):rest) =
        (\(a,_ca)->
           (Just (Pre a), rest))
        (definite fromTextEscaped "text" "Pre" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Pre a) =
        [CElem (Elem "Pre" [] (toTextEscaped a))]
instance XmlContent Text where
    fromElem (CElem (Elem "Text" [] c0):rest) =
        (\(a,_ca)->
           (Just (Text a), rest))
        (definite fromTextEscaped "text" "Text" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text a) =
        [CElem (Elem "Text" [] (toTextEscaped a))]
instance XmlContent Image where
    fromElem (CElem (Elem "Image" as c0):rest) =
        (\(a,_ca)->
           (Just (Image (fromAttrs as) a), rest))
        (definite fromText "text" "Image" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Image as a) =
        [CElem (Elem "Image" (toAttrs as) (toText a))]
instance XmlAttributes Image_Attrs where
    fromAttrs as =
        Image_Attrs
          { imageType = definiteA fromAttrToStr "Image" "type" as
          , imageAlt = definiteA fromAttrToStr "Image" "alt" as
          }
    toAttrs v = catMaybes 
        [ toAttrFrStr "type" (imageType v)
        , toAttrFrStr "alt" (imageAlt v)
        ]
instance XmlContent Link where
    fromElem (CElem (Elem "Link" as c0):rest) =
        (\(a,_ca)->
           (Just (Link (fromAttrs as) a), rest))
        (definite fromTextEscaped "text" "Link" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Link as a) =
        [CElem (Elem "Link" (toAttrs as) (toTextEscaped a))]
instance XmlAttributes Link_Attrs where
    fromAttrs as =
        Link_Attrs
          { linkHref = definiteA fromAttrToStr "Link" "href" as
          }
    toAttrs v = catMaybes 
        [ toAttrFrStr "href" (linkHref v)
        ]
instance XmlContent Above where
    fromElem (CElem (Elem "Above" [] c0):rest) =
        (\(a,_ca)->
           (Just (Above a), rest))
        (many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Above a) =
        [CElem (Elem "Above" [] (concatMap toElem a))]
instance XmlContent Output where
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem c0 =
        case (fromElem c0) of
        (Just a,rest) -> (Just (OPre a), rest)
        (_,_) ->
                case (fromElem c0) of
                (Just a,rest) -> (Just (OText a), rest)
                (_,_) ->
                        case (fromElem c0) of
                        (Just a,rest) -> (Just (OImage a), rest)
                        (_,_) ->
                                case (fromElem c0) of
                                (Just a,rest) -> (Just (OLink a), rest)
                                (_,_) ->
                                        case (fromElem c0) of
                                        (Just a,rest) -> (Just (OAbove a), rest)
                                        (_,_) ->
                                                case (fromElem c0) of
                                                (Just a,rest) -> (Just (OBeside a), rest)
                                                (_,_) ->
                                                        case (fromElem c0) of
                                                        (Just a,rest) -> (Just (OItemize a), rest)
                                                        (_,_) ->
                                                                case (fromElem c0) of
                                                                (Just a,rest) -> (Just (OSpace a), rest)
                                                                (_,_) ->
                                                                    (Nothing, c0)
    toElem (OPre a) = toElem a
    toElem (OText a) = toElem a
    toElem (OImage a) = toElem a
    toElem (OLink a) = toElem a
    toElem (OAbove a) = toElem a
    toElem (OBeside a) = toElem a
    toElem (OItemize a) = toElem a
    toElem (OSpace a) = toElem a
instance XmlContent Beside where
    fromElem (CElem (Elem "Beside" [] c0):rest) =
        (\(a,_ca)->
           (Just (Beside a), rest))
        (many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Beside a) =
        [CElem (Elem "Beside" [] (concatMap toElem a))]
instance XmlContent Itemize where
    fromElem (CElem (Elem "Itemize" [] c0):rest) =
        (\(a,_ca)->
           (Just (Itemize a), rest))
        (many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Itemize a) =
        [CElem (Elem "Itemize" [] (concatMap toElem a))]
instance XmlContent Space where
    fromElem (CElem (Elem "Space" as []):rest) =
        (Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem (CString _ s:rest) | all isSpace s = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
        [CElem (Elem "Space" (toAttrs as) [])]
instance XmlAttributes Space where
    fromAttrs as =
        Space
          { spaceWidth = definiteA fromAttrToStr "Space" "width" as
          , spaceHeight = definiteA fromAttrToStr "Space" "height" as
          , spaceUnit = definiteA fromAttrToStr "Space" "unit" as
          }
    toAttrs v = catMaybes 
        [ toAttrFrStr "width" (spaceWidth v)
        , toAttrFrStr "height" (spaceHeight v)
        , toAttrFrStr "unit" (spaceUnit v)
        ]


{-Done-}
