module Prolog.Data where

import qualified Autolib.Reader as R
import qualified Autolib.ToDoc as T

import Data.Char

import Data.Set (Set)
import qualified Data.Set as S

type Identifier = String

data Term = Variable Identifier
          | Apply Identifier [ Term ]
    deriving ( Eq )

type Terms = [ Term ]

variables :: Term -> Set Identifier
variables t = case t of
    Variable v -> S.singleton v
    Apply f xs -> S.unions $ map variables xs

varmap :: ( Identifier -> Identifier )
       -> ( Term -> Term )
varmap sub t = case t of
    Variable v -> Variable $ sub v
    Apply f xs -> Apply f ( map ( varmap sub ) xs )


instance T.ToDoc Term where
    toDoc t = case t of
        Variable v -> T.text v
        Apply f [] -> T.text f
        Apply f xs -> T.text f 
            T.<+> T.parens ( T.fsep $ T.punctuate T.comma $ map T.toDoc xs )

instance R.Reader Term where
    reader = do
        f <- R.my_identifier 
        if isUpper $ head f
           then return $ Variable f
           else do
               xs <- R.option [] $ R.my_parens $ R.my_commaSep $ R.reader
               return $ Apply f xs

