{-# language MultiParamTypeClasses, FlexibleInstances #-}

module Graph.TSP.Quiz where

import Graph.TSP.Plain ( TSP ( TSP ) )

import Graph.TSP.Config 

import Autolib.Util.Zufall ( selektion, randomRIO )
import Graph.Weighted

import Inter.Quiz ( Generator , generator , Project , project , quiz )
import Inter.Types ( Make )

import Control.Monad ( forM )
import Data.List ( tails )
import qualified Data.Set as S

instance Generator TSP Config ( Graph Int Int ) where
    generator TSP conf key = do
       let v = [ 1 .. nodes conf ]
       xys <- selektion ( edges conf )
          $ do (x : ys) <- tails v ; y <- ys ; return (x, y)
       e <- forM xys $ \ (x,y) -> do
           w <- randomRIO $ weight_bounds conf
           return $ Kante { von = x, nach = y, gewicht = w }
       return $ Graph { knoten = S.fromList v, kanten = S.fromList e }

instance Project TSP ( Graph v w ) ( Graph v w )  where 
    project TSP g = g

make :: Make
make = quiz TSP rc
