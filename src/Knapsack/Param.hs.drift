module Knapsack.Param where

--   $Id$

import Autolib.Reader
import Autolib.ToDoc

import Data.Typeable
import Text.XML.HaXml.Haskell2Xml

import Data.Ratio

import Autolib.Set
import Autolib.FiniteMap

data Param = 
     Param { anzahl      :: Int
	   , gewicht     :: ( Integer , Integer )
	   , wert        :: ( Integer , Integer )
	   , kapazitaet0 :: ( Integer , Integer )
	   }
     deriving ( Typeable )

p0 :: Param
p0 =  Param { anzahl      = 12
	    , gewicht     = (  3 , 12 )
	    , wert        = (  5 , 25 )
	    , kapazitaet0 = ( 40 , 60 )
	    }

{-! for Param derive: ToDoc, Reader, Haskell2Xml !-}

type Inp = ( Set Char 
	   , Rational 
	   , Integer 
	   , FiniteMap Char Integer 
	   , FiniteMap Char Integer 
	   )
objekte         :: Inp -> Set Char
optimaler_wert  :: Inp -> Rational
kapazitaet      :: Inp -> Integer
gewichte        :: Inp -> FiniteMap Char Integer
werte           :: Inp -> FiniteMap Char Integer

objekte        (x,_,_,_,_) = x
optimaler_wert (_,x,_,_,_) = x
kapazitaet     (_,_,x,_,_) = x
gewichte       (_,_,_,x,_) = x
werte          (_,_,_,_,x) = x

inp0 :: Inp
inp0 = ( mkSet "abcdef"
       , 55%2
       , 17
       , listToFM $ zip "abcdef" [4,3,5,5, 9,6]
       , listToFM $ zip "abcdef" [6,4,4,8,12,9]
       )
