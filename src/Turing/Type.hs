{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Turing/Type.hs.drift" #-}
-- -*- mode: haskell -*-

module Turing.Type 

( module Turing.Type
, module Sets
, module FiniteMap
)

where

-- $Id$

import Sets
import Size
import FiniteMap
import ReadFM
import ToDoc
import Reader

data Bewegung = L | O | R
     deriving (Eq, Ord, Show, Read)

{-! for Bewegung derive : ToDoc, Reader !-}

-- ohne methoden, soll nur die constraints aufsammeln
class ( Ord y, Show y, Show [y], ToDoc y, ToDoc [y], Reader y, Reader [y]  ) => UM y
instance ( Ord y, Show y, ToDoc y, ToDoc [y], Reader y, Reader [y]  ) => UM y

class ( UM y, UM z ) => TUM y z 
instance ( UM y, UM z ) => TUM y z 


data (UM y, UM z) => Turing y z = 
     Turing { eingabealphabet  :: Set y
	    , arbeitsalphabet  :: Set y
	    , leerzeichen      :: y
	    , zustandsmenge    :: Set z 
	    , tafel	       :: FiniteMap (y, z) (Set (y, z, Bewegung))
	    , startzustand     :: z
	    , endzustandsmenge :: Set z
	    }

{-! for Turing derive : ToDoc, Reader !-}

instance TUM y z => Size (Turing y z) where size = size . zustandsmenge

unCollect :: TUM y z
	=> FiniteMap (y, z) (Set (y, z, Bewegung))
	-> [ ((y, z), (y, z, Bewegung)) ]
unCollect tf = do
    (arg, cont) <- fmToList tf
    val <- setToList cont
    return ( arg, val )

collect :: TUM y z
	=>  [ ((y, z), (y, z, Bewegung)) ]
	->  FiniteMap (y, z) (Set (y, z, Bewegung))
collect avs = addListToFM_C union emptyFM $ do
    ( a, v ) <- avs
    return ( a, unitSet v )


instance TUM y z => Show (Turing y z) where
    show = render . toDoc

instance ( TUM y z )
    => Read (Turing y z) where
    readsPrec = parsec_readsPrec

lookupset :: Ord a => FiniteMap a (Set b) -> a -> Set b
lookupset fm x = case lookupFM fm x of
    Just m -> m; Nothing -> emptySet
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance (UM y,UM z,ToDoc y,ToDoc z) => ToDoc (Turing y z) where
    toDocPrec d (Turing aa ab ac ad ae af ag) = docParen (d >= 10)
	      (text "Turing" <+> dutch_record
	       [text "eingabealphabet" <+> equals <+> toDocPrec 0 aa,
		text "arbeitsalphabet" <+> equals <+> toDocPrec 0 ab,
		text "leerzeichen" <+> equals <+> toDocPrec 0 ac,
		text "zustandsmenge" <+> equals <+> toDocPrec 0 ad,
		text "tafel" <+> equals <+> toDocPrec 0 ae,
		text "startzustand" <+> equals <+> toDocPrec 0 af,
		text "endzustandsmenge" <+> equals <+> toDocPrec 0 ag])

instance (UM y,UM z,Reader y,Reader z) => Reader (Turing y z) where
    readerPrec d =
	       readerParen (d > 9)
	       (do my_reserved "Turing"
		   my_braces ((do my_reserved "eingabealphabet"
				  my_equals
				  aa <- readerPrec 0
				  my_comma
				  my_reserved "arbeitsalphabet"
				  my_equals
				  ab <- readerPrec 0
				  my_comma
				  my_reserved "leerzeichen"
				  my_equals
				  ac <- readerPrec 0
				  my_comma
				  my_reserved "zustandsmenge"
				  my_equals
				  ad <- readerPrec 0
				  my_comma
				  my_reserved "tafel"
				  my_equals
				  ae <- readerPrec 0
				  my_comma
				  my_reserved "startzustand"
				  my_equals
				  af <- readerPrec 0
				  my_comma
				  my_reserved "endzustandsmenge"
				  my_equals
				  ag <- readerPrec 0
				  return (Turing aa ab ac ad ae af ag))))

instance ToDoc Bewegung where
    toDocPrec d (L) = text "L"
    toDocPrec d (O) = text "O"
    toDocPrec d (R) = text "R"

instance Reader Bewegung where
    readerPrec d =
	       (do my_reserved "L"
		   return (L))
	       <|>
	       (do my_reserved "O"
		   return (O))
	       <|>
	       (do my_reserved "R"
		   return (R))

--  Imported from other files :-
