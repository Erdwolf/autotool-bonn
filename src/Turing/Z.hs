{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Turing/Z.hs.drift" #-}
-- -*- mode: haskell -*-

module Turing.Z where

import Turing.Type
import ToDoc
import Reader


data Z = A0 | A1 | A2 | B | C | D | E | F
     deriving (Eq, Ord, Show, Read)

{-! for Z derive : ToDoc, Reader !-}

instance UM Z
instance TUM Char Z


{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc Z where
    toDocPrec d (A0) = text "A0"
    toDocPrec d (A1) = text "A1"
    toDocPrec d (A2) = text "A2"
    toDocPrec d (B) = text "B"
    toDocPrec d (C) = text "C"
    toDocPrec d (D) = text "D"
    toDocPrec d (E) = text "E"
    toDocPrec d (F) = text "F"

instance Reader Z where
    readerPrec d =
	       (do my_reserved "A0"
		   return (A0))
	       <|>
	       (do my_reserved "A1"
		   return (A1))
	       <|>
	       (do my_reserved "A2"
		   return (A2))
	       <|>
	       (do my_reserved "B"
		   return (B))
	       <|>
	       (do my_reserved "C"
		   return (C))
	       <|>
	       (do my_reserved "D"
		   return (D))
	       <|>
	       (do my_reserved "E"
		   return (E))
	       <|>
	       (do my_reserved "F"
		   return (F))

--  Imported from other files :-
