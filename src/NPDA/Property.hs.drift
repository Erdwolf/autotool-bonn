-- -*- mode: haskell -*-

module NPDA.Property where

import NPDA.Type
import NPDA.Det

import Condition

import Autolib.Reporter
import Autolib.Reporter.Type
import qualified Autolib.Reporter.Checker as C

import Autolib.ToDoc
import Autolib.Reader
import Text.XML.HaXml.Haskell2Xml

import Data.Typeable

data Property = Det
    deriving ( Eq, Ord, Typeable )

{-! for Property derive: Reader, ToDoc, Haskell2Xml !-}

instance Condition  Property ( NPDA Char Char Int ) where
    condition p a = C.run ( NPDA.Property.check p ) a
    explain p = C.condition ( NPDA.Property.check p )

check :: Property -> C.Type  ( NPDA Char Char Int )
check p = case p of
         Det -> NPDA.Det.check 

