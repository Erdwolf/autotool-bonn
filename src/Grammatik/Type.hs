{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Grammatik/Type.hs.drift" #-}
-- -*- mode: haskell -*-

-- $Id$

module Grammatik.Type 

( module Grammatik.Type
, module Sets
)

where


import Sets

import Size
import ToDoc
import Reader

data Grammatik = Grammatik
	       { terminale      :: Set Char
	       , nichtterminale :: Set Char
	       , startsymbol	:: Char
	       , regeln		:: Set (String, String) 
	       }

{-! for Grammatik derive: ToDoc, Reader !-}

terms = setToList . terminale
vars  = setToList . nichtterminale
rules = setToList . regeln

instance Show Grammatik where show = render . toDoc
instance Read Grammatik where readsPrec = parsec_readsPrec

instance Size Grammatik where size = cardinality . regeln




{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc Grammatik where
    toDocPrec d (Grammatik aa ab ac ad) = docParen (d >= 10)
	      (text "Grammatik" <+> dutch_record
	       [text "terminale" <+> equals <+> toDocPrec 0 aa,
		text "nichtterminale" <+> equals <+> toDocPrec 0 ab,
		text "startsymbol" <+> equals <+> toDocPrec 0 ac,
		text "regeln" <+> equals <+> toDocPrec 0 ad])

instance Reader Grammatik where
    readerPrec d =
	       readerParen (d > 9)
	       (do my_reserved "Grammatik"
		   my_braces ((do my_reserved "terminale"
				  my_equals
				  aa <- readerPrec 0
				  my_comma
				  my_reserved "nichtterminale"
				  my_equals
				  ab <- readerPrec 0
				  my_comma
				  my_reserved "startsymbol"
				  my_equals
				  ac <- readerPrec 0
				  my_comma
				  my_reserved "regeln"
				  my_equals
				  ad <- readerPrec 0
				  return (Grammatik aa ab ac ad))))

--  Imported from other files :-
