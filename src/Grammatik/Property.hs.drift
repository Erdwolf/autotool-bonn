-- -*- mode: haskell -*-

module Grammatik.Property where

import Grammatik.Type
import Grammatik.CF.Eindeutig
import Grammatik.Hierarchie
import Autolib.Reporter.Type
import qualified Autolib.Reporter.Checker as C

import Autolib.Reader
import Autolib.ToDoc
import Text.XML.HaXml.Haskell2Xml

import Data.Typeable

data Property = Eindeutig Int
	      | Typ Int
	      | Monoton
	      | Kontextsensitiv
	      | Kontextfrei
	      | Linear
	      | Rechtslinear
	      | Linkslinear
	      | Epsfrei
	      | Kettenfrei
	      | Chomsky_Normal
	      | Greibach_Normal
     deriving ( Eq, Ord, Typeable )

{-! for Property derive: Reader, ToDoc, Haskell2Xml !-}

check :: Property -> Grammatik -> Reporter ()
check p = C.run $ case p of

    Typ 0 -> typ0
    Typ 1 -> typ1
    Typ 2 -> typ2
    Typ 3 -> typ3
    Monoton -> monoton
    Kontextsensitiv -> kontextsensitiv
    Kontextfrei -> kontextfrei
    Linear -> linear
    Rechtslinear -> rechtslinear
    Linkslinear -> linkslinear
    Epsfrei -> epsfrei
    Kettenfrei -> kettenfrei
    Chomsky_Normal -> chomsky
    Greibach_Normal -> greibach
    Eindeutig i -> eindeutig i

