{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "RAM/Type.hs.drift" #-}
-- -*- mode: haskell -*-

module RAM.Type where

-- $Id$

import RAM.Builtin

import ToDoc
import Reader
import Size

type Var = String

data Statement = Inc Var
	 | Dec Var
	 | Loop Var Program
	 | While Var Program
	 | Builtin { name :: Builtin, res :: Var, args :: [ Var ] }
    deriving ( Eq, Ord )

type Program = [ Statement ]

instance Size Program where 
    size = sum . map size
instance Size Statement where
    size ( Loop v p ) = succ $ size p
    size ( While v p ) = succ $ size p
    size _ = 1

flatten :: Program -> Program
flatten ps = do
    p <- ps
    p : case p of Loop v q -> flatten q
		  While v q -> flatten q
		  _ -> []

{-! for Statement derive: ToDoc, Reader !-}

instance Show Statement where
    show = render . toDoc

instance Read Statement where
    readsPrec = parsec_readsPrec

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc Statement where
    toDocPrec d (Inc aa) = docParen (d >= 10)
	      (text "Inc" <+> fsep [toDocPrec 0 aa])
    toDocPrec d (Dec aa) = docParen (d >= 10)
	      (text "Dec" <+> fsep [toDocPrec 0 aa])
    toDocPrec d (Loop aa ab) = docParen (d >= 10)
	      (text "Loop" <+> fsep [toDocPrec 0 aa, toDocPrec 0 ab])
    toDocPrec d (While aa ab) = docParen (d >= 10)
	      (text "While" <+> fsep [toDocPrec 0 aa, toDocPrec 0 ab])
    toDocPrec d (Builtin aa ab ac) = docParen (d >= 10)
	      (text "Builtin" <+> dutch_record
	       [text "name" <+> equals <+> toDocPrec 0 aa,
		text "res" <+> equals <+> toDocPrec 0 ab,
		text "args" <+> equals <+> toDocPrec 0 ac])

instance Reader Statement where
    readerPrec d =
	       readerParen (d > 9)
	       (do my_reserved "Inc"
		   aa <- readerPrec 0
		   return (Inc aa))
	       <|>
	       readerParen (d > 9)
	       (do my_reserved "Dec"
		   aa <- readerPrec 0
		   return (Dec aa))
	       <|>
	       readerParen (d > 9)
	       (do my_reserved "Loop"
		   aa <- readerPrec 0
		   ab <- readerPrec 0
		   return (Loop aa ab))
	       <|>
	       readerParen (d > 9)
	       (do my_reserved "While"
		   aa <- readerPrec 0
		   ab <- readerPrec 0
		   return (While aa ab))
	       <|>
	       readerParen (d > 9)
	       (do my_reserved "Builtin"
		   my_braces ((do my_reserved "name"
				  my_equals
				  aa <- readerPrec 0
				  my_comma
				  my_reserved "res"
				  my_equals
				  ab <- readerPrec 0
				  my_comma
				  my_reserved "args"
				  my_equals
				  ac <- readerPrec 0
				  return (Builtin aa ab ac))))

--  Imported from other files :-
