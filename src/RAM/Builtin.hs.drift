-- -*- mode: haskell -*-

module RAM.Builtin 

( Table, Entry, Builtin
, table, get
)

where

import ToDoc
import Reader
import Array

data Builtin = Copy 
	     | Plus  | Minus
	     | Times | Div | Mod
     deriving ( Eq, Ord, Ix )

{-! for Builtin derive: Reader, ToDoc !-}

instance Show Builtin where show = render . toDoc
instance Read Builtin where readsPrec = parsec_readsPrec

type Entry =  ( Int -- arity
		       , [ Integer ] -> Integer  -- meaning
		   )
type Table = Array Builtin Entry

table :: Table
table = array ( Copy, Mod )
	      [ ( Copy , ( 1, \ [x   ] -> x ) )
	      , ( Plus , ( 2, \ [x, y] -> x + y ) )
	      , ( Minus, ( 2, \ [x, y] -> max 0 $ x - y ) )
	      , ( Times, ( 2, \ [x, y] -> x * y ) )
	      , ( Div  , ( 2, \ [x, y] -> if y == 0 then 0 else x `div` y ) )
	      , ( Mod  , ( 2, \ [x, y] -> if y == 0 then 0 else x `mod` y ) )
	      ]


get :: Builtin -> Entry
get b = table ! b
