-- -*- mode: haskell -*-

module Convert.Input where

import Autolib.Reader
import Autolib.ToDoc
import Data.Typeable
import Text.XML.HaXml.Haskell2Xml

import qualified Autolib.NFA
import qualified Autolib.Exp

import qualified Exp.Property
import qualified NFA.Property

data Autolib.NFA.NFAC c Int => 
     Input c = NFA ( Autolib.NFA.NFA c Int )
	   | Exp  ( Autolib.Exp.RX c )
     deriving ( Typeable )

{-! for Input derive: Reader, ToDoc, Haskell2Xml !-}

lang :: Autolib.NFA.NFAC c Int 
     => Input c -> Doc
lang (NFA aut) =
    vcat [ text "die von diesem Automaten akzeptierte Sprache:"
	 , nest 4 $ toDoc aut
	 ]
lang (Exp exp) =
    vcat [ text "die von diesem Ausdruck erzeugte Sprache:"
	 , nest 4 $ toDoc exp
	 ]

