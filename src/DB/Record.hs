{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "DB/Record.hs.drift" #-}
-- -*- mode: haskell -*-

module DB.Record where

import Text.XML.HaXml.Haskell2Xml

data Record = Record { name :: String
		     , vorname :: String
		     , email :: String
		     -- , punkte :: [ (String, Int) ] -- Aufgabe, Anzahl
		     }

{-! for Record derive : Haskell2Xml !-}

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Haskell2Xml Record where
    toHType v =
	Defined "Record" []
		[Constr "Record" [] [toHType aa,toHType ab,toHType ac]]
      where
	(Record aa ab ac) = v
    fromContents (CElem (Elem constr [] cs):etc)
	| "Record" `isPrefixOf` constr =
	    (\(aa,cs00)-> (\(ab,cs01)-> (\(ac,_)-> (Record aa ab ac, etc))
					(fromContents cs01))
			  (fromContents cs00))
	    (fromContents cs)
    toContents v@(Record aa ab ac) =
	[mkElemC (showConstr 0 (toHType v)) (concat [toContents aa,
						     toContents ab,toContents ac])]

--  Imported from other files :-
