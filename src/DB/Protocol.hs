{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "DB/Protocol.hs.drift" #-}
-- -*- mode: haskell -*-

module DB.Protocol where

import DB.Data

import Text.XML.HaXml.Types
import Text.XML.HaXml.Haskell2Xml


data Request_Code = Put | Get | Delete
		  | Shutdown -- speziell behandeln
		  | Discard

{-! for Request_Code derive : Haskell2Xml !-}

data Request = Request
	     { request_code :: Request_Code
	     , base :: String -- Name der Datenbank (erstmal ignorieren)
	     , entry :: Entry
	     }

{-! for Request derive : Haskell2Xml !-}

data Response = OK Entry
		   | Failure String

{-! for Response derive : Haskell2Xml !-}

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Haskell2Xml Response where
    toHType v =
	Defined "Response" []
		[Constr "OK" [] [toHType aa],Constr "Failure" [] [toHType ab]]
      where
	(OK aa) = v
	(Failure ab) = v
    fromContents (CElem (Elem constr [] cs):etc)
	| "OK" `isPrefixOf` constr =
	    (\(aa,_)-> (OK aa, etc)) (fromContents cs)
	| "Failure" `isPrefixOf` constr =
	    (\(ab,_)-> (Failure ab, etc)) (fromContents cs)
    toContents v@(OK aa) =
	[mkElemC (showConstr 0 (toHType v)) (toContents aa)]
    toContents v@(Failure ab) =
	[mkElemC (showConstr 1 (toHType v)) (toContents ab)]

instance Haskell2Xml Request where
    toHType v =
	Defined "Request" []
		[Constr "Request" [] [toHType aa,toHType ab,toHType ac]]
      where
	(Request aa ab ac) = v
    fromContents (CElem (Elem constr [] cs):etc)
	| "Request" `isPrefixOf` constr =
	    (\(aa,cs00)-> (\(ab,cs01)-> (\(ac,_)-> (Request aa ab ac, etc))
					(fromContents cs01))
			  (fromContents cs00))
	    (fromContents cs)
    toContents v@(Request aa ab ac) =
	[mkElemC (showConstr 0 (toHType v)) (concat [toContents aa,
						     toContents ab,toContents ac])]

instance Haskell2Xml Request_Code where
    toHType v =
	Defined "Request_Code" []
		[Constr "Put" [] [],Constr "Get" [] [],Constr "Delete" [] [],
		 Constr "Shutdown" [] [],Constr "Discard" [] []]
    fromContents (CElem (Elem constr [] cs):etc)
	| "Shutdown" `isPrefixOf` constr =
	    (Shutdown,etc)
	| "Put" `isPrefixOf` constr =
	    (Put,etc)
	| "Get" `isPrefixOf` constr =
	    (Get,etc)
	| "Discard" `isPrefixOf` constr =
	    (Discard,etc)
	| "Delete" `isPrefixOf` constr =
	    (Delete,etc)
    toContents v@Put =
	[mkElemC (showConstr 0 (toHType v)) []]
    toContents v@Get =
	[mkElemC (showConstr 1 (toHType v)) []]
    toContents v@Delete =
	[mkElemC (showConstr 2 (toHType v)) []]
    toContents v@Shutdown =
	[mkElemC (showConstr 3 (toHType v)) []]
    toContents v@Discard =
	[mkElemC (showConstr 4 (toHType v)) []]

--  Imported from other files :-
