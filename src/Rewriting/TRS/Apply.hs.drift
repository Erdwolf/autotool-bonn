{-# OPTIONS -fglasgow-exts -fallow-overlapping-instances -fallow-incoherent-instances #-}

module Rewriting.TRS.Apply where

import qualified Rewriting.Apply as A

import Rewriting.TRS
import Type.Tree

import Rewriting.Derive.Instance
import Rewriting.Step
import Rewriting.Steps
{-
import Rewriting.Derive.Quiz
import Rewriting.Derive.Config
-}

import Autolib.Reporter
import Autolib.ToDoc
import Autolib.Reader

{-
import Autolib.FiniteMap
import Challenger.Partial
import Inter.Types
import Inter.Quiz
-}

import Control.Monad
import Data.Typeable

data For_TRS = For_TRS
    deriving ( Eq, Ord, Show, Read, Typeable )


class Apply tag system object action  where
    -- | apply one action to object
    apply :: tag -> system -> object -> action 
          -> Reporter object
    -- | list of all possible actions
    actions :: tag -> system -> object 
            -> [ action ]

instance (  Symbol c )
    => A.Apply For_TRS ( TRS c c ) ( Term c c ) ( Step c c ) where
    apply tag system object action = do
        exec system object action
    actions tag system object = 
        steps system object
