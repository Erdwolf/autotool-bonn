{-# OPTIONS -cpp #-}

module Hanoi.Type where

--  $Id$

import Hanoi.Restriction

import Condition

import Autolib.FiniteMap
import Autolib.ToDoc
import Autolib.Reader
import Autolib.Size 

import Data.Typeable

import Gateway.Help

type Scheibe = Integer

data Turm = A | B | C | D
    deriving ( Eq, Ord, Enum, Bounded, Typeable )

instance Source Turm where source _ = drift __FILE__

{-! for Turm derive: Reader, ToDoc !-}

type Hof = FiniteMap Turm [ Scheibe ]

type Zug = ( Turm, Turm )

instance Size Zug where size _ = 1

data HI = HI { start :: Hof
	     , ziel  :: Hof
	     , restriction :: Restriction
	     }
    deriving ( Typeable )

instance Source HI where source _ = drift __FILE__

{-! for HI derive: Reader, ToDoc !-}


-- local variables:
-- mode: haskell
-- end:






