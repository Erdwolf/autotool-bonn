-- -*- mode: haskell -*-

module Hanoi.Type where

--  $Id$

import Autolib.FiniteMap
import Autolib.ToDoc
import Autolib.Reader
import Autolib.Size 

import Text.XML.HaXml.Haskell2Xml
import Data.Typeable

import Gateway.Help

type Scheibe = Integer

data Turm = A | B | C | D
    deriving ( Eq, Ord, Enum, Typeable )

instance Source Turm where source _ = drift __FILE__

{-! for Turm derive: Reader, ToDoc, Haskell2Xml !-}

type Hof = FiniteMap Turm [ Scheibe ]

type Zug = ( Turm, Turm )

instance Size Zug where size _ = 1

data HI = HI { start :: Hof
	     , ziel  :: Hof
	     }
    deriving ( Typeable )

instance Source HI where source _ = drift __FILE__

{-! for HI derive: Reader, ToDoc, Haskell2Xml !-}

data Conf = Conf { scheiben :: Int
		 , turme :: Int
		 }
     deriving ( Typeable )

instance Source Conf where source _ = drift __FILE__

{-! for Conf derive: Reader, ToDoc, Haskell2Xml !-}







