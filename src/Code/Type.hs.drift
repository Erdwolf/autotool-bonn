{-# OPTIONS -fglasgow-exts -fallow-overlapping-instances #-}

module Code.Type 

( module Code.Type
, module Autolib.FiniteMap
, module Autolib.Set
)

where

--  $Id$


import Code.Param

import Data.Typeable

import Autolib.FiniteMap
import Autolib.Set
import Autolib.Size
import Autolib.ToDoc
import Autolib.Reader
import Autolib.Reporter

import Data.Maybe

-- | FIXME: das ist unzusammenhängend

class  ( Typeable a, Typeable b, Typeable c
       , ToDoc [a], ToDoc b
       , Reader [a]
       , Ord a , Eq b, BitSize b 
       ) 
       => Coder c a b | c a -> b, c b -> a where

     encode_hint :: c -> [a] -> b
     encode_hint c xs = encode c (take 3 xs)

     -- implement one of [ encode, encodeR ]
     encode      :: c -> [a] -> b
     encode c xs = fromMaybe (error "encode") $ result $ encodeR c xs

     encodeR      :: c -> [a] -> Reporter b
     encodeR c xs = do
         inform $ vcat [ text "Codierung von"
                       , nest 4 $ toDoc xs
                       ]
         let ys = encode c xs 
         inform $ vcat [ text "liefert"
                               , nest 4 $ toDoc ys
                               ]
         return ys

     decode_hint :: c -> b ->       [a]
     
     -- implement one of [ decode, decodeR ]
     decode      :: c -> b -> Maybe [a]
     decode c b = result $ decodeR c b

     decodeR     :: c -> b -> Reporter [a]
     decodeR c b = do
         inform $ vcat [ text "Decodierung von"
                       , nest 4 $ toDoc b
                       ]
         case decode c b of
             Just xs -> do
                 inform $ vcat [ text "liefert"
                               , nest 4 $ toDoc xs
                               ]
                 return xs
             Nothing -> do
                 reject $ text "ist nicht möglich."

class Size b => BitSize b where
      bitSize :: b -> Integer
      bitSize = fromIntegral . size

bits :: ( Integral a, Integral b ) 
     => a -> b
bits x | x > 1 = 1 + bits (x `div` 2 )
bits _ = 1


data Frequency a = Frequency ( FiniteMap a Int )

{-! for Frequency derive: ToDoc, Reader !-}

data Code a b = Code ( FiniteMap a [ b ] )

{-! for Code derive: ToDoc, Reader !-}

-- local variables:
-- mode: haskell
-- end;



