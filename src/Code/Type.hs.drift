{-# OPTIONS -fglasgow-exts #-}

module Code.Type 

( module Code.Type
, module Autolib.FiniteMap
, module Autolib.Set
)

where

--  $Id$


import Code.Param

import Data.Typeable

import Autolib.FiniteMap
import Autolib.Set
import Autolib.Size
import Autolib.ToDoc
import Autolib.Reader

-- | FIXME: das ist unzusammenhängend

class  ( Typeable a, Typeable b, Typeable c
       , ToDoc [a], ToDoc b
       , Reader [a]
       , Ord a , Eq b, Size b 
       ) 
       => Coder c a b | c a -> b, c b -> a where
     encode      :: c -> [a] -> b
     decode      :: c -> b -> Maybe [a]
     decode_hint :: c -> b ->       [a]

type Frequency a = FiniteMap a Int

type Code a b = FiniteMap a [ b ]




