-- -*- mode: haskell -*-

module SAT.State where

-- $Id$

import SAT.Types

import ToDoc
import Reader

import Sets
import FiniteMap

data State = 
     State { assignment :: Belegung -- erfüllend
	   , satisfying :: Set Literal -- dazu gehörende literale
	   , todo :: Int -- noch so viele klauseln
	   , width :: Int -- soviele literale pro klausel
	   , formula  :: [[Literal]] -- soweit schon gebaut
	   , clause :: [ Literal ] -- currently built
	   , csat :: Bool -- klausel ist bereits erfüllt?
	   , unfrequent :: Set Literal
	   , morefrequent :: Set Literal
	   , dependencies :: FiniteMap Variable ( Set Variable )
	   }

{-! for State derive: ToDoc, Reader !-}

instance Show State where show = render . toDoc
instance Read State where readsPrec = parsec_readsPrec
