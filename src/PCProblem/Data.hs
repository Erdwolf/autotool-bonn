{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "challenger/PCProblem/Data.hs.drift" #-}
-- -*- mode: haskell -*-

module PCProblem.Data where

import ToDoc
import Reader

import Set
import Letters

data PCP = PCP [(String, String)]

instance Letters PCP Char where
    letters ( PCP uvs ) = mkSet $ do (u, v) <- uvs ; u ++ v

{-! for PCP derive: ToDoc, Reader !-}

instance Show PCP where show = render . toDoc
instance Read PCP where readsPrec = parsec_readsPrec
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc PCP where
    toDocPrec d (PCP aa) = docParen (d >= 10)
	      (text "PCP" <+> fsep [toDocPrec 10 aa])

instance Reader PCP where
    readerPrec d =
	       readerParen (d > 9)
	       (do my_reserved "PCP"
		   aa <- readerPrec 0
		   return (PCP aa))

--  Imported from other files :-
